type: edu
files:
  - name: src/antifraud/AntiFraudApplication.java
    visible: true
    text: |-
      package antifraud;
      
      import org.springframework.boot.SpringApplication;
      import org.springframework.boot.autoconfigure.SpringBootApplication;
      
      @SpringBootApplication
      public class AntiFraudApplication {
          public static void main(String[] args) {
              SpringApplication.run(AntiFraudApplication.class, args);
          }
      }
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    text: |-
      server.port=28852
      server.error.include-message=always
      management.endpoints.web.exposure.include=*
      management.endpoint.shutdown.enabled=true
      spring.jackson.serialization.INDENT_OUTPUT=true
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      buildscript {
          apply plugin: 'hyperskill'
      
          repositories {
              mavenCentral()
          }
      
          dependencies {
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
      }
      
      test {
          jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
      }
    learner_created: false
  - name: test/AntiFraudTest.java
    visible: false
    text: |-
      import antifraud.AntiFraudApplication;
      import com.google.gson.JsonArray;
      import com.google.gson.JsonObject;
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.mocks.web.request.HttpRequest;
      import org.hyperskill.hstest.mocks.web.response.HttpResponse;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      
      import java.util.ArrayList;
      import java.util.List;
      
      import static org.hyperskill.hstest.common.JsonUtils.getJson;
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
      
      class TestHint {
          private final String apiPath;
          private final String requestBody;
          private final String message;
      
          public TestHint(String apiPath, String requestBody, String message) {
              this.apiPath = apiPath;
              this.requestBody = requestBody;
              this.message = message;
          }
      
          @Override
          public String toString() {
              return "Test case\n" +
                      "Testing api: '" + apiPath + '\'' + "\n" +
                      (requestBody.length() > 0 ? "request: '" + requestBody + '\'' + "\n" : "") +
                      "Expectations: '" + message + "'" + "\n" +
                      "-----";
          }
      }
      
      public class AntiFraudTest extends SpringTest {
      
          private final String transactionApi = "/api/antifraud/transaction";
          private final String userApi = "/api/auth/user";
          private final String userListApi = "/api/auth/list";
          private final String lockApi = "/api/auth/access";
          private final String roleApi = "/api/auth/role";
          private final String ipApi = "/api/antifraud/suspicious-ip";
          private final String cardApi = "/api/antifraud/stolencard";
          List<Integer> userIdList = new ArrayList<>();
      
          private final String administrator = "{\n" +
                  "   \"name\": \"administrator\",\n" +
                  "   \"username\": \"administrator\",\n" +
                  "   \"password\": \"oMoa4VvqnLxW\"\n" +
                  "}";
      
          private final String johndoe1 = "{\n" +
                  "   \"name\": \"John Doe 1\",\n" +
                  "   \"username\": \"johndoe1\",\n" +
                  "   \"password\": \"oMoa3VvqnLxW\"\n" +
                  "}";
      
          private final String johndoe2 = "{\n" +
                  "   \"name\": \"John Doe 2\",\n" +
                  "   \"username\": \"johndoe2\",\n" +
                  "   \"password\": \"oMoa5VvqnLxW\"\n" +
                  "}";
      
          private final String johndoe3 = "{\n" +
                  "   \"name\": \"John Doe 3\",\n" +
                  "   \"username\": \"johndoe3\",\n" +
                  "   \"password\": \"oMoa6VvqnLxW\"\n" +
                  "}";
      
          private final String wronguser1 = "{\n" +
                  "   \"name\": \"John Doe 1\",\n" +
                  "   \"password\": \"oa3VvqnLxW\"\n" +
                  "}";
      
          private final String wronguser2 = "{\n" +
                  "   \"name\": \"John Doe 2\",\n" +
                  "   \"username\": \"johndoe1\"\n" +
                  "}";
      
          private final String wronguserCred1 = "{\n" +
                  "   \"name\": \"John Doe 1\",\n" +
                  "   \"username\": \"johndoe1\",\n" +
                  "   \"password\": \"oa3VvqnLxW\"\n" +
                  "}";
      
          private final String wronguserCred2 = "{\n" +
                  "   \"name\": \"John Do\",\n" +
                  "   \"username\": \"johndo\",\n" +
                  "   \"password\": \"oMoa3VvqnLxW\"\n" +
                  "}";
      
          private final String listAnswer1 = "[ {\n" +
                  "  \"id\" : 1,\n" +
                  "  \"name\" : \"administrator\",\n" +
                  "  \"username\" : \"administrator\",\n" +
                  "  \"role\" : \"ADMINISTRATOR\"\n" +
                  "}, {\n" +
                  "  \"id\" : 2,\n" +
                  "  \"name\" : \"John Doe 1\",\n" +
                  "  \"username\" : \"johndoe1\",\n" +
                  "  \"role\" : \"MERCHANT\"\n" +
                  "}, {\n" +
                  "  \"id\" : 4,\n" +
                  "  \"name\" : \"John Doe 2\",\n" +
                  "  \"username\" : \"johndoe2\",\n" +
                  "  \"role\" : \"MERCHANT\"\n" +
                  "} ]";
      
          private final String listAnswer2 = "[ {\n" +
                  "  \"id\" : 1,\n" +
                  "  \"name\" : \"administrator\",\n" +
                  "  \"username\" : \"administrator\",\n" +
                  "  \"role\" : \"ADMINISTRATOR\"\n" +
                  "}, {\n" +
                  "  \"id\" : 4,\n" +
                  "  \"name\" : \"John Doe 2\",\n" +
                  "  \"username\" : \"johndoe2\",\n" +
                  "  \"role\" : \"MERCHANT\"\n" +
                  "} ]";
      
          private final String listAnswer3 = "[ {\n" +
                  "  \"id\" : 1,\n" +
                  "  \"name\" : \"administrator\",\n" +
                  "  \"username\" : \"administrator\",\n" +
                  "  \"role\" : \"ADMINISTRATOR\"\n" +
                  "}, {\n" +
                  "  \"id\" : 4,\n" +
                  "  \"name\" : \"John Doe 2\",\n" +
                  "  \"username\" : \"johndoe2\",\n" +
                  "  \"role\" : \"SUPPORT\"\n" +
                  "} ]";
      
          private final String tr1 = "{\n" +
                  "  \"amount\": 1,\n" +
                  "  \"ip\": \"192.168.1.1\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-22T16:00:00\"\n" +
                  "}";
      
          private final String tr2 = "{\n" +
                  "  \"amount\": 199,\n" +
                  "  \"ip\": \"192.168.1.1\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-22T16:01:00\"\n" +
                  "}";
      
          private final String tr3 = "{\n" +
                  "  \"amount\": 200,\n" +
                  "  \"ip\": \"192.168.1.1\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-22T16:02:00\"\n" +
                  "}";
      
          private final String tr4 = "{\n" +
                  "  \"amount\": 201,\n" +
                  "  \"ip\": \"192.168.1.1\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-22T16:03:00\"\n" +
                  "}";
      
          private final String tr5 = "{\n" +
                  "  \"amount\": 1499,\n" +
                  "  \"ip\": \"192.168.1.1\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-22T16:04:00\"\n" +
                  "}";
      
          private final String tr6 = "{\n" +
                  "  \"amount\": 1500,\n" +
                  "  \"ip\": \"192.168.1.1\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-22T16:05:00\"\n" +
                  "}";
      
          private final String tr7 = "{\n" +
                  "  \"amount\": 1501,\n" +
                  "  \"ip\": \"192.168.1.1\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-22T16:06:00\"\n" +
                  "}";
      
          private final String tr8 = "{\n" +
                  "  \"amount\": 2000,\n" +
                  "  \"ip\": \"192.168.1.1\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-22T16:07:00\"\n" +
                  "}";
      
          private final String trW1 = "{\n" +
                  "  \"amount\": -1,\n" +
                  "  \"ip\": \"192.168.1.1\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-22T16:00:00\"\n" +
                  "}";
      
          private final String trW2 = "{\n" +
                  "  \"amount\": 0,\n" +
                  "  \"ip\": \"192.168.1.1\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-22T16:00:00\"\n" +
                  "}";
      
          private final String trW3 = "{\n" +
                  "  \"ip\": \"192.168.1.1\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-22T16:00:00\"\n" +
                  "}";
      
          private final String trW4 = "{\n" +
                  "  \"amount\": \" \",\n" +
                  "  \"ip\": \"192.168.1.1\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-22T16:00:00\"\n" +
                  "}";
      
          private final String trW5 = "{\n" +
                  "  \"amount\": \"\",\n" +
                  "  \"ip\": \"192.168.1.1\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-22T16:00:00\"\n" +
                  "}";
      
          private final String trW6 = "{ }";
      
          private final String trP1 = "{\n" +
                  "  \"amount\": 1000,\n" +
                  "  \"ip\": \"192.168.1.67\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-22T16:00:00\"\n" +
                  "}";
      
          private final String trP2 = "{\n" +
                  "  \"amount\": 1000,\n" +
                  "  \"ip\": \"192.168.1.1\",\n" +
                  "  \"number\": \"4000003305160034\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-22T16:00:00\"\n" +
                  "}";
      
          private final String trP3 = "{\n" +
                  "  \"amount\": 1000,\n" +
                  "  \"ip\": \"192.168.1.67\",\n" +
                  "  \"number\": \"4000003305160034\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-22T16:00:00\"\n" +
                  "}";
      
          private final String trP4 = "{\n" +
                  "  \"amount\": 2000,\n" +
                  "  \"ip\": \"192.168.1.67\",\n" +
                  "  \"number\": \"4000003305160034\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-22T16:00:00\"\n" +
                  "}";
      
          // correlation rules
          private final String corr1IP = "{\n" +
                  "  \"amount\": 1,\n" +
                  "  \"ip\": \"192.168.1.2\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-22T17:10:00\"\n" +
                  "}";
      
          private final String corr2IP = "{\n" +
                  "  \"amount\": 1,\n" +
                  "  \"ip\": \"192.168.1.3\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-22T17:11:00\"\n" +
                  "}";
      
          private final String corr22IP = "{\n" +
                  "  \"amount\": 1,\n" +
                  "  \"ip\": \"192.168.1.3\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-22T17:12:00\"\n" +
                  "}";
      
          private final String corr3IP = "{\n" +
                  "  \"amount\": 1,\n" +
                  "  \"ip\": \"192.168.1.4\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-22T17:12:00\"\n" +
                  "}";
      
          private final String corr4IP = "{\n" +
                  "  \"amount\": 1,\n" +
                  "  \"ip\": \"192.168.1.5\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-22T17:13:00\"\n" +
                  "}";
      
          private final String corr5IP = "{\n" +
                  "  \"amount\": 2000,\n" +
                  "  \"ip\": \"192.168.1.5\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-22T17:14:00\"\n" +
                  "}";
      
          private final String corr1Reg = "{\n" +
                  "  \"amount\": 1,\n" +
                  "  \"ip\": \"192.168.1.2\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"EAP\",\n" +
                  "  \"date\": \"2022-01-21T17:10:00\"\n" +
                  "}";
      
          private final String corr2Reg = "{\n" +
                  "  \"amount\": 1,\n" +
                  "  \"ip\": \"192.168.1.2\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"ECA\",\n" +
                  "  \"date\": \"2022-01-21T17:11:00\"\n" +
                  "}";
      
          private final String corr22Reg = "{\n" +
                  "  \"amount\": 1,\n" +
                  "  \"ip\": \"192.168.1.2\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"ECA\",\n" +
                  "  \"date\": \"2022-01-21T17:12:00\"\n" +
                  "}";
      
          private final String corr3Reg = "{\n" +
                  "  \"amount\": 1,\n" +
                  "  \"ip\": \"192.168.1.2\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"HIC\",\n" +
                  "  \"date\": \"2022-01-21T17:13:00\"\n" +
                  "}";
      
          private final String corr4Reg = "{\n" +
                  "  \"amount\": 1,\n" +
                  "  \"ip\": \"192.168.1.2\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"SSA\",\n" +
                  "  \"date\": \"2022-01-21T17:14:00\"\n" +
                  "}";
      
          private final String corr5Reg = "{\n" +
                  "  \"amount\": 2000,\n" +
                  "  \"ip\": \"192.168.1.2\",\n" +
                  "  \"number\": \"4000008449433403\",\n" +
                  "  \"region\": \"SA\",\n" +
                  "  \"date\": \"2022-01-21T17:15:00\"\n" +
                  "}";
      
      
      
      
      
          private final String ipAnswer = "[ {\n" +
                  "  \"id\" : 1,\n" +
                  "  \"ip\" : \"192.168.1.66\"\n" +
                  "}, {\n" +
                  "  \"id\" : 2,\n" +
                  "  \"ip\" : \"192.168.1.67\"\n" +
                  "} ]";
      
          private final String ipAnswer2 = "[ {\n" +
                  "  \"id\" : 2,\n" +
                  "  \"ip\" : \"192.168.1.67\"\n" +
                  "} ]";
      
          private final String ipAnswerEmpty = "[]";
      
          private final String cardAnswerEmpty = "[]";
      
          private final String cardAnswer = "[ {\n" +
                  "  \"id\" : 1,\n" +
                  "  \"number\" : \"4000003305061034\"\n" +
                  "}, {\n" +
                  "  \"id\" : 2,\n" +
                  "  \"number\" : \"4000003305160034\"\n" +
                  "} ]";
      
          private final String cardAnswer2 = "[ {\n" +
                  "  \"id\" : 2,\n" +
                  "  \"number\" : \"4000003305160034\"\n" +
                  "} ]";
      
      
      
      
          public AntiFraudTest() {
              super(AntiFraudApplication.class, "../service_db.mv.db");
          }
      
          /**
           * Method for restarting application
           *
           */
          private CheckResult restartApplication() {
              try {
                  reloadSpring();
              } catch (Exception ex) {
                  throw new UnexpectedError(ex.getMessage());
              }
              return CheckResult.correct();
          }
      
          private HttpResponse checkResponseStatus(String user, String body,
                                                   int status, String api, String method) {
              HttpRequest request = null;
              switch (method) {
                  case "GET":
                      request = get(api);
                      break;
                  case "POST":
                      request = post(api, body);
                      break;
                  case "PUT":
                      request = put(api, body);
                      break;
                  case "DELETE":
                      request = delete(api);
                      break;
              }
      
              if (user != null) {
                  JsonObject userJson = getJson(user).getAsJsonObject();
                  String password = userJson.get("password").getAsString();
                  String login = userJson.get("username").getAsString().toLowerCase();
                  request = request.basicAuth(login, password);
              }
              HttpResponse response = request.send();
      
              if (response.getStatusCode() != status) {
                  throw new WrongAnswer(method + " " + api  + " should respond with "
                          + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                          + "Response body:\n" + response.getContent() + "\n");
              }
              return response;
          }
      
          public boolean isNumeric(String strNum) {
              if (strNum == null) {
                  return false;
              }
              try {
                  long l = Long.parseLong(strNum);
              } catch (NumberFormatException nfe) {
                  return false;
              }
              return true;
          }
      
          CheckResult testAddUser(String body, int status, String role, TestHint hint) {
      
              System.out.println(hint.toString());
      
              HttpResponse response = checkResponseStatus(null, body, status, userApi, "POST");
      
      
              if (response.getStatusCode() == 201) {
      
                  JsonObject rightResponse = getJson(body).getAsJsonObject();
                  rightResponse.remove("password");
      
                  // Check is it JSON in response or something else
                  if (!response.getJson().isJsonObject()) {
                      return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                              response.getContent().getClass());
      
                  }
      
                  JsonObject jsonResponse = response.getJson().getAsJsonObject();
      
                  // Check if password is presence in response
                  if (jsonResponse.get("password") != null) {
                      return CheckResult.wrong("You must remove password from response\n" +
                              jsonResponse);
                  }
      
                  if (jsonResponse.get("id") == null) {
                      return CheckResult.wrong("Response must contain user ID\n" +
                              "Received response:\n" +
                              jsonResponse);
                  }
      
                  if (jsonResponse.get("id").isJsonNull()) {
                      return CheckResult.wrong("Response must contain user ID\n" +
                              "Received response:\n" +
                              jsonResponse);
                  }
      
                  if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
                      return CheckResult.wrong("User ID must be unique!\n" +
                              "Received response:\n" +
                              jsonResponse);
                  }
      
                  rightResponse.addProperty("id", jsonResponse.get("id").toString());
                  // Check JSON in response
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("id", isInteger())
                                  .value("name", rightResponse.get("name").getAsString())
                                  .value("role", role)
                                  .value("username", isString(s -> s.equalsIgnoreCase(rightResponse.get("username").getAsString())))
                  );
                  userIdList.add(jsonResponse.get("id").getAsInt());
              }
              return CheckResult.correct();
          }
      
          CheckResult testDeleteUser(String body, int status, String user, TestHint hint) {
      
              System.out.println(hint.toString());
      
              HttpResponse response = checkResponseStatus(body, "", status, userApi + "/" + user, "DELETE");
      
              if (response.getStatusCode() == 200) {
      
                  // Check is it JSON in response or something else
                  if (!response.getJson().isJsonObject()) {
                      return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                              response.getContent().getClass());
      
                  }
      
                  JsonObject jsonResponse = response.getJson().getAsJsonObject();
      
                  // Check JSON in response
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("status", "Deleted successfully!")
                                  .value("username", isString(s -> s.equalsIgnoreCase(user)))
                  );
              }
              return CheckResult.correct();
          }
      
          private CheckResult testListUser(String user, int status, String answer,
                                           int position, TestHint hint) {
      
              System.out.println(hint.toString());
      
              HttpResponse response = checkResponseStatus(user, "", status, userListApi, "GET");
      
              if (response.getStatusCode() == 200) {
                  // Check is it array of JSON in response or something else
                  if (!response.getJson().isJsonArray()) {
                      return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                              response.getContent().getClass());
      
                  }
      
                  JsonArray correctJson = getJson(answer).getAsJsonArray();
                  JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
                  if (responseJson.size() == 0) {
                      throw new WrongAnswer("Empty array in response!");
                  }
      
                  if (responseJson.size() != position + 1) {
                      throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                              " users in response, must be - " + (position + 1));
                  }
      
                  // Check JSON in response
                  expect(responseJson.get(position).toString()).asJson().check(
                          isObject()
                                  .value("id", isInteger())
                                  .value("name", correctJson.get(position).getAsJsonObject().get("name").getAsString())
                                  .value("role", correctJson.get(position).getAsJsonObject().get("role").getAsString())
                                  .value("username",
                                          isString(s -> s.equalsIgnoreCase(correctJson.get(position).getAsJsonObject()
                                                  .get("username").getAsString()))
                                  ));
      
              }
              return CheckResult.correct();
          }
      
          private CheckResult testLock(String user, int status, String operation, String username, TestHint hint) {
              System.out.println(hint.toString());
      
              JsonObject jsonBody = new JsonObject();
              jsonBody.addProperty("username", username);
              jsonBody.addProperty("operation", operation);
      
              HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, lockApi, "PUT");
              if (response.getStatusCode() == 200) {
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("status", isString(s ->
                                          s.equalsIgnoreCase("User " + username + " " + operation + "ed!"))));
              }
              return CheckResult.correct();
          }
      
          private CheckResult testRole(String user, int status, String role, String username, TestHint hint) {
              System.out.println(hint.toString());
      
              JsonObject jsonBody = new JsonObject();
              jsonBody.addProperty("username", username);
              jsonBody.addProperty("role", role);
      
              HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, roleApi, "PUT");
      
              if (response.getStatusCode() == 200) {
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("id", isInteger())
                                  .value("name", isString())
                                  .value("role", role)
                                  .value("username", isString(s -> s.equalsIgnoreCase(username))));
              }
              return CheckResult.correct();
          }
      
          private CheckResult testTransaction(String user, String api, String method, int status, String body,
                                              String answer, String answer2, TestHint hint) {
      
              System.out.println(hint.toString());
      
              HttpResponse response = checkResponseStatus(user, body, status, api, method);
      
              // Check JSON in response
              if (response.getStatusCode() == 200) {
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("result", answer)
                                  .value("info", answer2));
              }
              return CheckResult.correct();
          }
      
          private CheckResult testAddIP(String user, int status, String ip, TestHint hint) {
              System.out.println(hint.toString());
      
              JsonObject jsonBody = new JsonObject();
              jsonBody.addProperty("ip", ip);
      
              HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, ipApi, "POST");
              if (response.getStatusCode() == 200) {
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("id", isInteger())
                                  .value("ip", ip));
              }
              return CheckResult.correct();
          }
      
          private CheckResult testDeleteIP(String user, int status, String ip, TestHint hint) {
              System.out.println(hint.toString());
      
              HttpResponse response = checkResponseStatus(user, "", status, ipApi + "/" + ip, "DELETE");
              if (response.getStatusCode() == 200) {
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("status", "IP " + ip + " successfully removed!"));
              }
              return CheckResult.correct();
          }
      
          private CheckResult testAddCard(String user, int status, String number, TestHint hint) {
              System.out.println(hint.toString());
      
              JsonObject jsonBody = new JsonObject();
              jsonBody.addProperty("number", number);
      
              HttpResponse response = checkResponseStatus(user, jsonBody.toString(), status, cardApi, "POST");
              if (response.getStatusCode() == 200) {
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("id", isInteger())
                                  .value("number", number));
              }
              return CheckResult.correct();
          }
      
          private CheckResult testDeleteCard(String user, int status, String number, TestHint hint) {
              System.out.println(hint.toString());
      
              HttpResponse response = checkResponseStatus(user, "", status, cardApi + "/" + number, "DELETE");
              if (response.getStatusCode() == 200) {
                  expect(response.getContent()).asJson().check(
                          isObject()
                                  .value("status", "Card " + number + " successfully removed!"));
              }
              return CheckResult.correct();
          }
      
          private CheckResult testGetIP(String user, int status, String answer, TestHint hint) {
              System.out.println(hint.toString());
      
              HttpResponse response = checkResponseStatus(user, "", status, ipApi, "GET");
      
              if (response.getStatusCode() == 200) {
                  if (!response.getJson().isJsonArray()) {
                      return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                              response.getContent().getClass());
      
                  }
      
                  JsonArray correctJson = getJson(answer).getAsJsonArray();
                  JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
      
                  if (responseJson.size() != correctJson.size()) {
                      throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                              " objects in response, must be - " + correctJson.size());
                  }
      
                  // Check JSON in response
                  for (int i =0; i < correctJson.size(); i++) {
                      expect(responseJson.get(i).toString()).asJson().check(
                              isObject()
                                      .value("id", isInteger())
                                      .value("ip", correctJson.get(i).getAsJsonObject().get("ip").getAsString())
                      );
                  }
      
              }
              return CheckResult.correct();
          }
      
          private CheckResult testGetCard(String user, int status, String answer, TestHint hint) {
              System.out.println(hint.toString());
      
              HttpResponse response = checkResponseStatus(user, "", status, cardApi, "GET");
      
              if (response.getStatusCode() == 200) {
                  if (!response.getJson().isJsonArray()) {
                      return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                              response.getContent().getClass());
      
                  }
      
                  JsonArray correctJson = getJson(answer).getAsJsonArray();
                  JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
      
                  if (responseJson.size() != correctJson.size()) {
                      throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                              " objects in response, must be - " + correctJson.size());
                  }
      
                  // Check JSON in response
                  for (int i =0; i < correctJson.size(); i++) {
                      expect(responseJson.get(i).toString()).asJson().check(
                              isObject()
                                      .value("id", isInteger())
                                      .value("number", correctJson.get(i).getAsJsonObject().get("number").getAsString())
                      );
                  }
      
              }
              return CheckResult.correct();
          }
      
          @DynamicTest
          DynamicTesting[] dt = new DynamicTesting[]{
                  // Test POST request for signup api
                  () -> testAddUser(wronguser1, 400, "MERCHANT",
                          new TestHint(userApi, wronguser1, "In case of wrong data in request, endpoint" +
                                  " must respond with BAD REQUEST  status (400).")), // 1
      
                  () -> testAddUser(wronguser2, 400, "MERCHANT",
                          new TestHint(userApi, wronguser2, "In case of wrong data in request, endpoint" +
                                  " must respond with BAD REQUEST  status (400).")), // 2
      
                  () -> testAddUser(administrator, 201, "ADMINISTRATOR",
                          new TestHint(userApi, johndoe1, "If user successfully added, endpoint" +
                                  " must respond with HTTP CREATED status (201) ")), // 3
      
                  () -> testListUser(administrator, 200,  listAnswer1, 0,
                          new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                  " and body with array of objects representing the users sorted by ID in ascending order.")), // 4
      
      
                  () -> testAddUser(johndoe1, 201, "MERCHANT",
                          new TestHint(userApi, johndoe1, "If user successfully added, endpoint" +
                                  " must respond with HTTP CREATED status (201) ")), // 5
      
                  () -> testListUser(administrator, 200,  listAnswer1, 1,
                          new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                  " and body with array of objects representing the users sorted by ID in ascending order.")), // 6
      
                  () -> testListUser(wronguserCred1, 401,  listAnswer1, 0,
                          new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 7
      
                  () -> testListUser(wronguserCred2, 401,  listAnswer1, 0,
                          new TestHint(userListApi, "", "A user with incorrect credentials is not allowed")), // 8
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 401,tr1,
                          "ALLOWED", "none",
                          new TestHint(transactionApi, "", "Merchant after registration" +
                                  " must be LOCKED")), // 9
      
                  () -> testLock(administrator, 200, "UNLOCK", "johndoe1",
                          new TestHint(lockApi, "", "A user johndoe1 must be UNLOCKED")), // 10
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 200,tr1,
                          "ALLOWED", "none",
                          new TestHint(transactionApi, "", "A user johndoe1 must be UNLOCKED")), // 11
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 200,tr1,
                          "ALLOWED", "none",
                          new TestHint(transactionApi, "amount = 1", "Result validating of Transaction" +
                                  " must be 'ALLOWED'")), // 12
      
                  // Testing persistence
                  () -> restartApplication(), // 13
      
                  () -> testListUser(administrator, 200,  listAnswer1, 1,
                          new TestHint(userListApi, "", "After restart user must exist")), // 14
      
                  () -> testAddUser(johndoe1, 409, "MERCHANT",
                          new TestHint(userApi, johndoe1, "In case of an attempt to register an existing user," +
                                  " endpoint must respond with HTTP CONFLICT status (409).")), // 15
      
                  () -> testAddUser(johndoe2, 201, "MERCHANT",
                          new TestHint(userApi, johndoe2, "If user successfully added, endpoint" +
                                  " must respond with HTTP CREATED status (201) ")), // 16
      
                  () -> testListUser(administrator, 200,  listAnswer1, 2,
                          new TestHint(userListApi, "", "Endpoint must respond with HTTP OK status (200)" +
                                  " and body with array of objects representing the users sorted by ID in ascending order.")), // 17
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr2,
                          "ALLOWED", "none",
                          new TestHint(transactionApi, "amount = 199", "Result validating of Transaction" +
                                  " must be 'ALLOWED'")), // 18
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr3,
                          "ALLOWED", "none",
                          new TestHint(transactionApi, "amount = 200", "Result validating of Transaction" +
                                  " must be 'ALLOWED'")), // 19
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr4,
                          "MANUAL_PROCESSING", "amount",
                          new TestHint(transactionApi, "amount = 201", "Result validating of Transaction" +
                                  " must be 'MANUAL_PROCESSING'")), // 20
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr5,
                          "MANUAL_PROCESSING", "amount",
                          new TestHint(transactionApi, "amount = 1499", "Result validating of Transaction" +
                                  " must be 'MANUAL_PROCESSING'")), // 21
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr6,
                          "MANUAL_PROCESSING", "amount",
                          new TestHint(transactionApi, "amount = 1500", "Result validating of Transaction" +
                                  " must be 'MANUAL_PROCESSING'")), // 22
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr7,
                          "PROHIBITED", "amount",
                          new TestHint(transactionApi, "amount = 1501", "Result validating of Transaction" +
                                  " must be 'PROHIBITED'")), // 23
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 200, tr8,
                          "PROHIBITED", "amount",
                          new TestHint(transactionApi, "amount = 2000", "Result validating of Transaction" +
                                  " must be 'PROHIBITED'")), // 24
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW1,
                          "Wrong request!", "none",
                          new TestHint(transactionApi, "amount = -1", "Response status" +
                                  " must be 'Bad request'")), // 25
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW2,
                          "Wrong request!", "none",
                          new TestHint(transactionApi, "amount = 0", "Response status" +
                                  " must be 'Bad request'")), // 26
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 400,trW3,
                          "Wrong request!", "none",
                          new TestHint(transactionApi, "amount = null", "Response status" +
                                  " must be 'Bad request'")), // 27
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 400,trW4,
                          "Wrong request!", "none",
                          new TestHint(transactionApi, "amount = \"\"", "Response status" +
                                  " must be 'Bad request'")), // 28
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW5,
                          "Wrong request!",  "none",
                          new TestHint(transactionApi, "amount = \" \"", "Response status" +
                                  " must be 'Bad request'")), // 29
      
                  () -> testTransaction(johndoe1, transactionApi, "POST", 400, trW6,
                          "Wrong request!",   "none",
                          new TestHint(transactionApi, "empty body", "Response status" +
                                  " must be 'Bad request'")), // 30
      
                  () -> testDeleteUser(administrator,404,"somebody",
                          new TestHint(userApi, userApi + "/" + "somebody", "If a user is not found," +
                                  " respond with HTTP Not Found status (404).")), // 31
      
                  () -> testDeleteUser(administrator,200,"johndoe1",
                          new TestHint(userApi, userApi + "/" + "johndoe1", "The endpoint must delete" +
                                  " the user and respond with HTTP OK status (200)")), // 32
      
                  () -> testListUser(administrator, 200,  listAnswer2, 1,
                          new TestHint(userListApi, "", "User 'johndoe1' must be delete")), // 33
      
                  () -> testRole(administrator,404,"MERCHANT", "johndoe22",
                          new TestHint(roleApi, "", "If a user is not found, endpoint" +
                                  " must respond with the HTTP Not Found status (404).")), // 34
      
                  () -> testRole(administrator,400,"USER", "johndoe2",
                          new TestHint(roleApi, "", "If a role is not found, endpoint" +
                                  " must respond with the HTTP Bad Request status (400).")), // 35
      
                  () -> testRole(administrator,400,"ADMINISTRATOR", "johndoe2",
                          new TestHint(roleApi, "", "If a role is ADMINISTRATOR, endpoint" +
                                  " must respond with the HTTP Bad Request status (400).")), // 36
      
                  () -> testRole(administrator,200,"SUPPORT", "johndoe2",
                          new TestHint(roleApi, "", "If a role successfully changed," +
                                  " respond with the HTTP OK status (200)")), // 37
      
                  () -> testRole(administrator,409,"SUPPORT", "johndoe2",
                          new TestHint(roleApi, "", "If a role already assigned to a user," +
                                  " endpoint must respond with the HTTP Conflict status (409).")), // 38
      
                  () -> testLock(administrator, 200, "UNLOCK", "johndoe2",
                          new TestHint(lockApi, "", "A user johndoe2 must be UNLOCKED")), // 39
      
                  () -> testListUser(johndoe2, 200,  listAnswer3, 1,
                          new TestHint(userListApi, "", "Role for user 'johndoe2" +
                                  "' must be changed to SUPPORT")), // 40
      
                  () -> testTransaction(johndoe2, transactionApi, "POST", 403, tr1,
                          "ALLOWED",   "none",
                          new TestHint(transactionApi, "", "Role MERCHANT must be removed from" +
                                  " user johndoe2!")), // 41
      
                  // test Locking
                  () -> testAddUser(johndoe3, 201, "MERCHANT",
                          new TestHint(userApi, johndoe3, "If user successfully added, endpoint" +
                                  " must respond with HTTP CREATED status (201) ")), // 42
      
                  () -> testTransaction(johndoe3, transactionApi, "POST", 401, tr1,
                          "ALLOWED",  "none",
                          new TestHint(transactionApi, "", "MERCHANT user after registration" +
                                  " must be LOCKED")), // 43
      
                  () -> testLock(administrator, 200, "UNLOCK", "johndoe3",
                          new TestHint(lockApi, "", "A user johndoe3 must be UNLOCKED")), // 44
      
                  () -> testTransaction(johndoe3, transactionApi, "POST", 200, tr1,
                          "ALLOWED",  "none",
                          new TestHint(transactionApi, "", "A user johndoe3 must be UNLOCKED")), // 45
      
                  () -> testLock(administrator, 200, "LOCK", "johndoe3",
                          new TestHint(lockApi, "", "A user johndoe3 must be LOCKED")), // 46
      
                  () -> testTransaction(johndoe3, transactionApi, "POST", 401, tr1,
                          "ALLOWED",  "none",
                          new TestHint(transactionApi, "", "A user johndoe3 must be LOCKED")), // 47
      
                  () -> testLock(administrator, 200, "UNLOCK", "johndoe3",
                          new TestHint(lockApi, "", "A user johndoe3 must be UNLOCKED")), // 48
      
                  // test role model
                  () -> testTransaction(administrator, transactionApi, "POST", 403, tr1,
                          "ALLOWED",  "none",
                          new TestHint(transactionApi, "", "A user with role ADMINISTRATOR" +
                                  " must not have access to " + transactionApi)), // 49
      
                  () -> testTransaction(johndoe2, transactionApi, "POST", 403, tr1,
                          "ALLOWED",  "none",
                          new TestHint(transactionApi, "", "A user with role SUPPORT" +
                                  " must not have access to " + transactionApi)), // 50
      
                  () -> testTransaction(null, transactionApi, "POST", 401, tr1,
                          "ALLOWED",  "none",
                          new TestHint(transactionApi, "", "A user with role ANONYMOUS" +
                                  " must not have access to " + transactionApi)), // 51
      
                  () -> testDeleteUser(null,401,"johndoe1",
                          new TestHint(userApi, "", "A user with role ANONYMOUS" +
                                  " must not have access to DELETE " + userApi)), // 52
      
                  () -> testDeleteUser(johndoe2,403,"johndoe1",
                          new TestHint(userApi, "", "A user with role SUPPORT" +
                                  " must not have access to DELETE " + userApi)), // 53
      
                  () -> testDeleteUser(johndoe3,403,"johndoe1",
                          new TestHint(userApi, "", "A user with role MERCHANT" +
                                  " must not have access to DELETE " + userApi)), // 54
      
                  () -> testListUser(null, 401,  listAnswer3, 1,
                          new TestHint(userListApi, "", "A user with role ANONYMOUS" +
                                  " must not have access to " + userListApi)), // 55
      
                  () -> testListUser(johndoe3, 403,  listAnswer3, 1,
                          new TestHint(userListApi, "", "A user with role MERCHANT" +
                                  " must not have access to " + userListApi)), // 56
      
                  () -> testGetIP(administrator, 403, ipAnswerEmpty,
                          new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                  " must not have access to GET " + ipApi)), // 57
      
                  () -> testGetIP(johndoe3, 403, ipAnswerEmpty,
                          new TestHint(ipApi, "", "A user with role MERCHANT" +
                                  " must not have access to GET " + ipApi)), // 58
      
                  () -> testAddIP(administrator, 403, "192.168.1.66",
                          new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                  " must not have access to POST " + ipApi)), // 59
      
                  () -> testAddIP(johndoe3, 403, "192.168.1.66",
                          new TestHint(ipApi, "", "A user with role MERCHANT" +
                                  " must not have access to POST " + ipApi)), // 60
      
                  () -> testDeleteIP(administrator, 403, "192.168.1.66",
                          new TestHint(ipApi, "", "A user with role ADMINISTRATOR" +
                                  " must not have access to DELETE " + ipApi)), // 61
      
                  () -> testDeleteIP(johndoe3, 403, "192.168.1.66",
                          new TestHint(ipApi, "", "A user with role MERCHANT" +
                                  " must not have access to DELETE " + ipApi)), // 62
      
                  () -> testGetCard(administrator, 403, cardAnswerEmpty,
                          new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                  " must not have access to GET " + cardApi)), // 63
      
                  () -> testGetCard(johndoe3, 403, cardAnswerEmpty,
                          new TestHint(cardApi, "", "A user with role MERCHANT" +
                                  " must not have access to GET " + cardApi)), // 64
      
                  () -> testAddCard(administrator, 403, "4000003305061034",
                          new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                  " must not have access to POST " + cardApi)), // 65
      
                  () -> testAddCard(johndoe3, 403, "4000003305061034",
                          new TestHint(cardApi, "", "A user with role MERCHANT" +
                                  " must not have access to POST " + cardApi)), // 66
      
                  () -> testDeleteIP(administrator, 403, "4000003305061034",
                          new TestHint(cardApi, "", "A user with role ADMINISTRATOR" +
                                  " must not have access to DELETE " + cardApi)), // 67
      
                  () -> testDeleteIP(johndoe3, 403, "4000003305061034",
                          new TestHint(cardApi, "", "A user with role MERCHANT" +
                                  " must not have access to DELETE " + cardApi)), // 68
      
      
                  // Test ip black list
                  () -> testGetIP(johndoe2, 200, ipAnswerEmpty,
                          new TestHint(ipApi, "", "Endpoint must respond with empty array")), // 69
      
                  () -> testAddIP(johndoe2, 200, "192.168.1.66",
                          new TestHint(ipApi, "", "IP must be added to Black List")), // 70
      
                  () -> testAddIP(johndoe2, 409, "192.168.1.66",
                          new TestHint(ipApi, "", "If IP already in database, " +
                                  " endpoint must respond with the HTTP Conflict status (409).")), // 71
      
                  () -> testAddIP(johndoe2, 400, "192.168.351.66",
                          new TestHint(ipApi, "", "If IP doesn't have right format," +
                                  " respond with HTTP Bad Request status (400)")), // 72
      
                  () -> testAddIP(johndoe2, 400, "192.168.1.",
                          new TestHint(ipApi, "", "If IP doesn't have right format," +
                                  " respond with HTTP Bad Request status (400)")), // 73
      
                  () -> testAddIP(johndoe2, 200, "192.168.1.67",
                          new TestHint(ipApi, "", "IP must be added to Black List")), // 74
      
                  () -> testGetIP(johndoe2, 200, ipAnswer,
                          new TestHint(ipApi, "", "Endpoint must responds with Black List")), // 75
      
                  () -> testDeleteIP(johndoe2, 200, "192.168.1.66",
                          new TestHint(ipApi, "", "IP must be removed from Black List")), // 76
      
                  () -> testDeleteIP(johndoe2, 404, "192.168.1.66",
                          new TestHint(ipApi, "", "If IP not found in database, " +
                                  "respond with the HTTP Not Found status (404).")), // 77
      
                  () -> testDeleteIP(johndoe2, 400, "192.168.1.",
                          new TestHint(ipApi, "", "If IP doesn't have right format," +
                                  " respond with HTTP Bad Request status (400)")), // 78
      
                  () -> testGetIP(johndoe2, 200, ipAnswer2,
                          new TestHint(ipApi, "", "IP must be removed from Black List")), // 79
      
      
                  // Test card number black list
                  () -> testGetCard(johndoe2, 200, cardAnswerEmpty,
                          new TestHint(cardApi, "", "Endpoint must respond with empty array")), // 80
      
                  () -> testAddCard(johndoe2, 200, "4000003305061034",
                          new TestHint(cardApi, "", "A card must be added to Black List")), // 81
      
                  () -> testAddCard(johndoe2, 409, "4000003305061034",
                          new TestHint(cardApi, "", "If card-number already in database, " +
                                  "endpoint must respond with the HTTP Conflict status (409).")), // 82
      
                  () -> testAddCard(johndoe2, 400, "400000330506103",
                          new TestHint(cardApi, "", "If card-number doesn't have right format, " +
                                  "endpoint must respond with HTTP Bad Request status (400).")), // 83
      
                  () -> testAddCard(johndoe2, 400, "4000003305061033",
                          new TestHint(cardApi, "", "If checksum of card-number is wrong, " +
                                  "endpoint must respond with HTTP Bad Request status (400).")), // 84
      
                  () -> testAddCard(johndoe2, 200, "4000003305160034",
                          new TestHint(cardApi, "", "A card must be added to Black List")), // 85
      
                  () -> testGetCard(johndoe2, 200, cardAnswer,
                          new TestHint(cardApi, "", "Endpoint must responds with Black List")), // 86
      
                  () -> testDeleteCard(johndoe2, 200, "4000003305061034",
                          new TestHint(cardApi, "", "Card must be removed from Black List")), // 87
      
                  () -> testDeleteCard(johndoe2, 404, "4000003305061034",
                          new TestHint(cardApi, "", "If card-number not found in database," +
                                  " respond with the HTTP Not Found status (404).")), // 88
      
                  () -> testDeleteCard(johndoe2, 400, "400000330506103",
                          new TestHint(cardApi, "", "If card-number doesn't have right format, " +
                                  "endpoint must respond with HTTP Bad Request status (400).")), // 89
      
                  () -> testGetCard(johndoe2, 200, cardAnswer2,
                          new TestHint(cardApi, "", "Card must be removed from Black List")), // 90
      
                  // Test new validating
                  () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP1,
                          "PROHIBITED",  "ip",
                          new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                  " due to - suspicious ip reason")), // 91
      
                  () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP2,
                          "PROHIBITED",  "card-number",
                          new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                  " due to - stolen card reason")), // 92
      
                  () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP3,
                          "PROHIBITED",  "card-number, ip",
                          new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                  " due to - stolen card, suspicious ip reasons")), // 93
      
                  () -> testTransaction(johndoe3, transactionApi, "POST", 200, trP4,
                          "PROHIBITED",  "amount, card-number, ip",
                          new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                  " due to - amount, stolen card, suspicious ip reasons")), // 94
      
                  // Test correlation rules
                  () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr1IP,
                          "ALLOWED",  "none",
                          new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 95
      
                  () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr2IP,
                          "ALLOWED",  "none",
                          new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 96
      
                  () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr22IP,
                          "ALLOWED",  "none",
                          new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 97
      
                  () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr3IP,
                          "MANUAL_PROCESSING",  "ip-correlation",
                          new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING" +
                                  " due to - ip correlation rule")), // 98
      
                  () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr4IP,
                          "PROHIBITED",  "ip-correlation",
                          new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                  " due to - ip correlation rule")), // 99 Thnx to E. Kovko
      
                  () -> testAddCard(johndoe2, 200, "4000008449433403",
                          new TestHint(cardApi, "", "A card must be added to Black List")), // 100
      
                  () -> testAddIP(johndoe2, 200, "192.168.1.5",
                          new TestHint(ipApi, "", "IP must be added to Black List")), // 101
      
                  () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr5IP,
                          "PROHIBITED",  "amount, card-number, ip, ip-correlation",
                          new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                  " due to - amount, card-number, ip, ip-correlation reasons")), // 102
                  //
                  () -> testDeleteCard(johndoe2, 200, "4000008449433403",
                          new TestHint(cardApi, "", "Card must be removed from Black List")), // 103
      
                  () -> testDeleteIP(johndoe2, 200, "192.168.1.5",
                          new TestHint(ipApi, "", "IP must be removed from Black List")), // 104
      
      
                  () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr1Reg,
                          "ALLOWED",  "none",
                          new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 105
      
                  () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr2Reg,
                          "ALLOWED",  "none",
                          new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 106
      
                  () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr22Reg,
                          "ALLOWED",  "none",
                          new TestHint(transactionApi, "", "Transaction must be ALLOWED")), // 107
      
                  () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr3Reg,
                          "MANUAL_PROCESSING",  "region-correlation",
                          new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING" +
                                  " due to - region correlation rule")), // 108
      
                  () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr4Reg,
                          "PROHIBITED",  "region-correlation",
                          new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                  " due to - region correlation rule")), // 109
      
                  () -> testAddCard(johndoe2, 200, "4000008449433403",
                          new TestHint(cardApi, "", "A card must be added to Black List")), // 110
      
                  () -> testAddIP(johndoe2, 200, "192.168.1.2",
                          new TestHint(ipApi, "", "IP must be added to Black List")), // 111
      
                  () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr5Reg,
                          "PROHIBITED",  "amount, card-number, ip, region-correlation",
                          new TestHint(transactionApi, "", "Transaction must be PROHIBITED" +
                                  " due to - amount, card-number, ip, region-correlation reasons")), // 112
      
                  () -> testDeleteCard(johndoe2, 200, "4000008449433403",
                          new TestHint(cardApi, "", "Card must be removed from Black List")), // 113
      
                  () -> testTransaction(johndoe3, transactionApi, "POST", 200, corr3IP,
                          "MANUAL_PROCESSING",  "ip-correlation",
                          new TestHint(transactionApi, "", "Transaction must be MANUAL_PROCESSING" +
                                  " due to - ip correlation rule")), // 114
      
          };
      }
    learner_created: false
  - name: src/antifraud/domain/dto/FraudUserRoleDTO.java
    visible: true
    text: |
      package antifraud.domain.dto;
      
      import antifraud.domain.enums.UserRoles;
      import lombok.AllArgsConstructor;
      import lombok.Getter;
      import lombok.NoArgsConstructor;
      import lombok.Setter;
      
      @AllArgsConstructor
      @NoArgsConstructor
      @Getter
      @Setter
      public class FraudUserRoleDTO {
      
          private String username;
          private String role;
      }
    learner_created: true
  - name: src/antifraud/domain/model/RegistrationRequest.java
    visible: true
    text: |
      package antifraud.domain.model;
      
      public record RegistrationRequest(String name, String username, String password) { }
    learner_created: true
  - name: src/antifraud/domain/model/IpAdress.java
    visible: true
    text: |
      package antifraud.domain.model;
      
      import jakarta.persistence.Entity;
      import jakarta.persistence.GeneratedValue;
      import jakarta.persistence.GenerationType;
      import jakarta.persistence.Id;
      import lombok.AllArgsConstructor;
      import lombok.Getter;
      import lombok.NoArgsConstructor;
      import lombok.Setter;
      
      
      @Entity
      public class IpAdress {
      
          @Id
          @GeneratedValue(strategy = GenerationType.IDENTITY)
          private Long id;
          private String ip;
      
          public IpAdress()
          {}
      
          public IpAdress(Long id, String ip) {
              this.id = id;
              this.ip = ip;
          }
      
      
          public Long getId() {
              return id;
          }
      
          public void setId(Long id) {
              this.id = id;
          }
      
          public String getIp() {
              return ip;
          }
      
          public void setIp(String ip) {
              this.ip = ip;
          }
      }
    learner_created: true
  - name: src/antifraud/service/FraudUserService.java
    visible: true
    text: |
      package antifraud.service;
      
      import antifraud.domain.dto.FraudUserDTO;
      import antifraud.domain.dto.UserAccessDTO;
      import antifraud.domain.enums.UserRoles;
      import antifraud.domain.model.FraudUser;
      import antifraud.domain.model.RegistrationRequest;
      import antifraud.exception.ConflictException;
      import antifraud.exception.NotFoundException;
      import antifraud.repository.FraudUserRepository;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.security.crypto.password.PasswordEncoder;
      import org.springframework.stereotype.Service;
      
      import java.util.Optional;
      
      @Service
      public class FraudUserService {
      
          @Autowired
          private FraudUserRepository fraudUserRepository;
      
          @Autowired
          private PasswordEncoder passwordEncoder;
      
          public UserRoles getRole(String role){
              if (role.equals("ADMINISTRATOR")){
                  return UserRoles.ADMINISTRATOR;
              }
              else if (role.equals("MERCHANT")){
                  return UserRoles.MERCHANT;
              }
              else if (role.equals("SUPPORT")){
                  return UserRoles.SUPPORT;
              }
              return null;
          }
      
      
      
          public FraudUserDTO registerUser(RegistrationRequest request) {
              if (fraudUserRepository.existsByUsername(request.username())) {
                  throw new RuntimeException("User already exists");
              }
      
              FraudUser user = new FraudUser();
              user.setName(request.name());
              user.setUsername(request.username());
              user.setPassword(passwordEncoder.encode(request.password()));
      
              boolean isFirstUser = fraudUserRepository.count() == 0;
              if (isFirstUser) {
                  user.setRole(UserRoles.ADMINISTRATOR);
                  user.setLocked(false);
              } else {
                  user.setRole(UserRoles.MERCHANT);
                  user.setLocked(true);
              }
      
              FraudUser savedUser = fraudUserRepository.save(user);
              return new FraudUserDTO(savedUser.getId(), savedUser.getName(), savedUser.getUsername(), savedUser.getRole());
          }
      
          public FraudUserDTO changeRole(FraudUserDTO fraudUserDTO) {
              String username = fraudUserDTO.getUsername();
              String role = fraudUserDTO.getRole().toString();
      
              if (role == null || username == null || (!role.equals("SUPPORT") && !role.equals("MERCHANT"))) {
                  throw new IllegalArgumentException("Invalid role or username");
              }
      
              Optional<FraudUser> optionalUser = fraudUserRepository.findByUsername(username);
              if (optionalUser.isPresent()) {
                  FraudUser fraudUser = optionalUser.get();
                  System.out.println(fraudUser.getRole());
                  if (role.equals(fraudUser.getRole().toString())) {
                      throw new ConflictException("Role already assigned to the user");
                  } else {
                      fraudUser.setRole(getRole(fraudUserDTO.getRole().toString()));
                      fraudUserRepository.save(fraudUser);
                      return new FraudUserDTO(fraudUser.getId(), fraudUser.getName(), fraudUser.getUsername(), fraudUser.getRole());
                  }
              } else {
                  throw new NotFoundException("User not found");
              }
          }
      
          public String changeUserAccess(UserAccessDTO accessDTO) {
              String username = accessDTO.getUsername();
              String operation = accessDTO.getOperation();
      
              if (username == null || operation == null) {
                  throw new IllegalArgumentException("Invalid username or operation");
              }
      
              Optional<FraudUser> optionalUser = fraudUserRepository.findByUsername(username);
              if (optionalUser.isEmpty()) {
                  throw new NotFoundException("User not found");
              }
      
              FraudUser user = optionalUser.get();
      
              if (user.getRole() == UserRoles.ADMINISTRATOR) {
                  throw new IllegalArgumentException("Administrator cannot be locked");
              }
      
              if ("LOCK".equals(operation)) {
                  user.setLocked(true);
                  fraudUserRepository.save(user);
                  return "User " + username + " locked!";
              } else if ("UNLOCK".equals(operation)) {
                  user.setLocked(false);
                  fraudUserRepository.save(user);
                  return "User " + username + " unlocked!";
              } else {
                  throw new IllegalArgumentException("Invalid operation");
              }
          }
      
      }
    learner_created: true
  - name: src/antifraud/config/RestAuthenticationEntryPoint.java
    visible: true
    text: |
      package antifraud.config;
      
      import jakarta.servlet.ServletException;
      import jakarta.servlet.http.HttpServletRequest;
      import jakarta.servlet.http.HttpServletResponse;
      import org.springframework.security.core.AuthenticationException;
      import org.springframework.security.web.AuthenticationEntryPoint;
      import org.springframework.stereotype.Component;
      
      import java.io.IOException;
      
      @Component
      public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {
      
          @Override
          public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {
              response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
          }
      }
    learner_created: true
  - name: src/antifraud/domain/dto/FraudUserDeletionDTO.java
    visible: true
    text: |
      package antifraud.domain.dto;
      
      public class FraudUserDeletionDTO {
          private String username;
          private String status;
      
          public FraudUserDeletionDTO() {
          }
      
          public FraudUserDeletionDTO(String username, String status) {
              this.username = username;
              this.status = status;
          }
      
          public FraudUserDeletionDTO(String status) {
              this.status = status;
          }
      
          public String getUsername() {
              return username;
          }
      
          public void setUsername(String username) {
              this.username = username;
          }
      
          public String getStatus() {
              return status;
          }
      
          public void setStatus(String status) {
              this.status = status;
          }
      }
    learner_created: true
  - name: src/antifraud/domain/model/StolenCard.java
    visible: true
    text: |
      package antifraud.domain.model;
      
      import jakarta.persistence.Entity;
      import jakarta.persistence.GeneratedValue;
      import jakarta.persistence.GenerationType;
      import jakarta.persistence.Id;
      import lombok.AllArgsConstructor;
      import lombok.Getter;
      import lombok.NoArgsConstructor;
      import lombok.Setter;
      
      @Entity
      
      public class StolenCard {
          @Id
          @GeneratedValue(strategy = GenerationType.IDENTITY)
          private Long id;
          private String number;
      
          public StolenCard(String number){
              this.number = number;
          }
      
          public StolenCard(Long id, String number) {
              this.id = id;
              this.number = number;
          }
      
          public StolenCard() {
      
          }
      
      
          public Long getId() {
              return id;
          }
      
          public void setId(Long id) {
              this.id = id;
          }
      
          public String getNumber() {
              return number;
          }
      
          public void setNumber(String number) {
              this.number = number;
          }
      
      }
    learner_created: true
  - name: src/antifraud/domain/dto/FraudUserDTO.java
    visible: true
    text: |
      package antifraud.domain.dto;
      
      import antifraud.domain.enums.UserRoles;
      
      public class FraudUserDTO {
      
          private Integer id;
          private String name;
          private String username;
          private UserRoles role;
      
          public FraudUserDTO() {
          }
      
          public FraudUserDTO(Integer id, String name, String username, UserRoles role) {
              this.id = id;
              this.name = name;
              this.username = username;
              this.role = role;
          }
      
      
          public Integer getId() {
              return id;
          }
      
          public void setId(Integer id) {
              this.id = id;
          }
      
          public String getName() {
              return name;
          }
      
          public void setName(String name) {
              this.name = name;
          }
      
          public String getUsername() {
              return username;
          }
      
          public void setUsername(String username) {
              this.username = username;
          }
      
          public UserRoles getRole() {
              return role;
          }
      
          public void setRole(UserRoles role) {
              this.role = role;
          }
      
      }
    learner_created: true
  - name: src/antifraud/controller/FraudUserController.java
    visible: true
    text: |
      package antifraud.controller;
      
      import antifraud.domain.dto.FraudUserDTO;
      import antifraud.domain.dto.FraudUserDeletionDTO;
      import antifraud.domain.dto.FraudUserRoleDTO;
      import antifraud.domain.dto.UserAccessDTO;
      import antifraud.domain.enums.UserRoles;
      import antifraud.domain.model.FraudUser;
      import antifraud.domain.model.RegistrationRequest;
      import antifraud.exception.ConflictException;
      import antifraud.exception.NotFoundException;
      import antifraud.repository.FraudUserRepository;
      import antifraud.service.FraudUserService;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.http.HttpStatus;
      import org.springframework.http.ResponseEntity;
      import org.springframework.security.crypto.password.PasswordEncoder;
      import org.springframework.web.bind.annotation.*;
      //import list
      import java.util.List;
      import java.util.Map;
      
      @RestController
      @RequestMapping("/api/auth")
      public class FraudUserController {
      
          private final FraudUserRepository repository;
          private final PasswordEncoder passwordEncoder;
      
          @Autowired
          private FraudUserService fraudUserService;
      
          public FraudUserController(FraudUserRepository repository,
                                PasswordEncoder passwordEncoder) {
              this.repository = repository;
              this.passwordEncoder = passwordEncoder;
          }
      
          boolean firstOccur = true;
      
          @PostMapping(path = "/user")
          public ResponseEntity<FraudUserDTO> register(@RequestBody RegistrationRequest request) {
      
              if (repository.existsByUsername(request.username())) {
                  return ResponseEntity.status(409).build();
              }
              else if (request.name() == null || request.username() == null || request.password() == null) {
                  return ResponseEntity.badRequest().build();
              }
      
              var user = new FraudUser();
              user.setName(request.name());
              user.setUsername(request.username());
              user.setPassword(passwordEncoder.encode(request.password()));
      
              boolean isFirstUser = repository.count() == 0;
              if (isFirstUser) {
                  user.setRole(UserRoles.ADMINISTRATOR);
                  firstOccur = false;
              } else {
                  user.setRole(UserRoles.MERCHANT);
                  user.setLocked(true);
              }
      
              repository.save(user);
      
              return ResponseEntity.status(201).body(new FraudUserDTO(user.getId(), user.getName(), user.getUsername(), user.getRole()));
          }
      
          @GetMapping(path = "/list")
          public ResponseEntity<List<FraudUserDTO>> list(){
              var list = (repository.findAllByOrderByIdAsc()).stream()
                      .map(user -> new FraudUserDTO(user.getId(), user.getName(), user.getUsername(), user.getRole())).toList();
      
              return ResponseEntity.ok().body(list);
          }
      
          @DeleteMapping(path = "/user/{username}")
          public ResponseEntity<FraudUserDeletionDTO> delete(@PathVariable String username) {
              if (!repository.existsByUsername(username)) {
                  return ResponseEntity.notFound().build();
              }
              var user = repository.findByUsername(username).get();
              repository.delete(user);
              return  ResponseEntity.ok().body(new FraudUserDeletionDTO(username, "Deleted successfully!"));
          }
          @PutMapping(path = "/role")
          public ResponseEntity<FraudUserDTO> changeRole(@RequestBody FraudUserDTO fraudUserDTO) {
      
              try {
                  FraudUserDTO updatedUser = fraudUserService.changeRole(fraudUserDTO);
                  return ResponseEntity.ok().body(updatedUser);
              } catch (NotFoundException e) {
                  return ResponseEntity.notFound().build();
              } catch (IllegalArgumentException e) {
                  return ResponseEntity.badRequest().build();
              } catch (ConflictException e) {
                  return ResponseEntity.status(HttpStatus.CONFLICT).build();
              }
          }
      
          @PutMapping("/access")
          public ResponseEntity<Map<String, String>> changeUserAccess(@RequestBody UserAccessDTO accessDTO) {
              try {
                  String status = fraudUserService.changeUserAccess(accessDTO);
                  return ResponseEntity.ok(Map.of("status", status));
              } catch (NotFoundException e) {
                  return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
              } catch (IllegalArgumentException e) {
                  return ResponseEntity.badRequest().build();
              }
          }
      
      
      }
    learner_created: true
  - name: src/antifraud/domain/dto/StolenCardDTO.java
    visible: true
    text: |
      package antifraud.domain.dto;
      
      import lombok.AllArgsConstructor;
      import lombok.Getter;
      import lombok.NoArgsConstructor;
      import lombok.Setter;
      
      public class StolenCardDTO {
          private Long id;
          private String number;
      
          public StolenCardDTO(Long id, String number) {
              this.id = id;
              this.number = number;
          }
      
          public StolenCardDTO(){}
      
          public Long getId() {
              return id;
          }
      
          public void setId(Long id) {
              this.id = id;
          }
      
          public String getNumber() {
              return number;
          }
      
          public void setNumber(String number) {
              this.number = number;
          }
      }
    learner_created: true
  - name: src/antifraud/service/FraudUserDetailsServiceImpl.java
    visible: true
    text: |
      package antifraud.service;
      
      import antifraud.domain.model.FraudUser;
      import antifraud.domain.model.FraudUserAdapter;
      import antifraud.repository.FraudUserRepository;
      import org.springframework.security.core.userdetails.UserDetails;
      import org.springframework.security.core.userdetails.UserDetailsService;
      import org.springframework.security.core.userdetails.UsernameNotFoundException;
      import org.springframework.stereotype.Service;
      
      @Service
      public class FraudUserDetailsServiceImpl implements UserDetailsService {
      
          private final FraudUserRepository fraudUserRepository;
      
          public FraudUserDetailsServiceImpl(FraudUserRepository fraudUserRepository) {
              this.fraudUserRepository = fraudUserRepository;
          }
      
      
          @Override
          public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
              FraudUser user = fraudUserRepository.findByUsername(username)
                      .orElseThrow(()-> new UsernameNotFoundException("User not found"));
              return new FraudUserAdapter(user);
          }
      }
    learner_created: true
  - name: src/antifraud/repository/StolenCardRepository.java
    visible: true
    text: |
      package antifraud.repository;
      
      import antifraud.domain.dto.StolenCardDTO;
      import antifraud.domain.model.StolenCard;
      import org.springframework.data.jpa.repository.JpaRepository;
      import org.springframework.stereotype.Repository;
      
      import java.util.List;
      
      @Repository
      public interface StolenCardRepository extends JpaRepository<StolenCard, Long> {
          boolean existsByNumber(String number);
      
          StolenCard findByNumber(String number);
      
          List<StolenCard> findAllByOrderByIdAsc();
      }
    learner_created: true
  - name: src/antifraud/controller/StolenCardController.java
    visible: true
    text: |
      package antifraud.controller;
      
      import antifraud.domain.dto.IpAdressDTO;
      import antifraud.domain.dto.StolenCardDTO;
      import antifraud.exception.NotFoundException;
      import antifraud.service.StolenCardService;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.http.MediaType;
      import org.springframework.http.ResponseEntity;
      import org.springframework.web.bind.annotation.*;
      
      import java.util.List;
      import java.util.Map;
      
      @RestController
      @RequestMapping("/api/antifraud/stolencard")
      public class StolenCardController {
      
          @Autowired
          private StolenCardService stolenCardService;
      
      
          @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
          public ResponseEntity<StolenCardDTO> addCard(@RequestBody StolenCardDTO number){
              if (number.getNumber() == null || number.getNumber().isEmpty()){
                  return ResponseEntity.badRequest().build();
              }
      
              try {
                  return ResponseEntity.ok(stolenCardService.addCard(number.getNumber()));
              } catch (IllegalArgumentException e){
                  return ResponseEntity.badRequest().build();
              } catch (RuntimeException e){
                  return ResponseEntity.status(409).build();
              }
          }
      
          @DeleteMapping("/{number}")
          public ResponseEntity<Map<String, String>> deleteCard(@PathVariable String number){
              try {
                  return ResponseEntity.ok(Map.of("status", stolenCardService.deleteCard(number)));
              } catch (NotFoundException e){
                  return ResponseEntity.notFound().build();
              } catch (RuntimeException e){
                  return ResponseEntity.badRequest().build();
              }
          }
      
          @GetMapping
          public ResponseEntity<List<StolenCardDTO>> getAllIps(){
              return ResponseEntity.ok().body(stolenCardService.listCards());
          }
      }
    learner_created: true
  - name: src/antifraud/config/SecurityConfig.java
    visible: true
    text: |
      package antifraud.config;
      
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.context.annotation.Bean;
      import org.springframework.http.HttpMethod;
      import org.springframework.security.config.Customizer;
      import org.springframework.security.config.annotation.web.builders.HttpSecurity;
      import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
      import org.springframework.security.config.http.SessionCreationPolicy;
      import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
      import org.springframework.security.crypto.password.PasswordEncoder;
      import org.springframework.security.web.SecurityFilterChain;
      import org.springframework.security.config.annotation.web.configurers.CsrfConfigurer;
      import org.springframework.stereotype.Component;
      
      import static org.springframework.boot.autoconfigure.security.servlet.PathRequest.toH2Console;
      
      @EnableWebSecurity
      @Component
      public class SecurityConfig {
      
          public RestAuthenticationEntryPoint restAuthenticationEntryPoint() {
              return new RestAuthenticationEntryPoint();
          }
          private RestAuthenticationEntryPoint restAuthenticationEntryPoint;
      
          @Autowired
          public SecurityConfig(RestAuthenticationEntryPoint restAuthenticationEntryPoint) {
              this.restAuthenticationEntryPoint = restAuthenticationEntryPoint;
          }
      
          @Bean
          public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
              return http
                      .httpBasic(Customizer.withDefaults())
                      .csrf(
                              csrf -> csrf
                                      .ignoringRequestMatchers(toH2Console())
                                      .disable()
                      )
                      .exceptionHandling(handling -> handling
                              .authenticationEntryPoint(restAuthenticationEntryPoint))
      
                      .authorizeHttpRequests(requests -> requests
                              .requestMatchers("/api/antifraud/suspicious-ip","/api/antifraud/suspicious-ip/**").hasAuthority("SUPPORT")
                              .requestMatchers("/api/antifraud/stolencard","/api/antifraud/stolencard/**").hasAuthority("SUPPORT")
                              .requestMatchers(HttpMethod.POST, "/api/auth/user").permitAll()
                              .requestMatchers(HttpMethod.DELETE, "/api/auth/user/**").hasAuthority("ADMINISTRATOR")
                              .requestMatchers(HttpMethod.GET, "/api/auth/list").hasAnyAuthority("ADMINISTRATOR", "SUPPORT")
      //                        .requestMatchers(HttpMethod.POST, "/api/antifraud/transaction/**").hasAuthority("MERCHANT")
                              .requestMatchers(HttpMethod.POST, "/api/antifraud/transaction/**").hasAuthority("MERCHANT")
                              .requestMatchers(HttpMethod.PUT, "/api/auth/access", "/api/auth/access/").hasAuthority("ADMINISTRATOR")
                              .requestMatchers(HttpMethod.PUT,"/api/auth/role", "/api/auth/role/").hasAuthority("ADMINISTRATOR")
                              .requestMatchers(toH2Console()).permitAll()
                              .requestMatchers("/actuator/shutdown").permitAll()
                              .anyRequest().authenticated())
                      .headers(headers -> headers
                              .frameOptions()
                              .sameOrigin()
                      )
                      .sessionManagement(session -> session
                              .sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                      .build();
          }
      
          @Bean
          public PasswordEncoder passwordEncoder() {
              return new BCryptPasswordEncoder();
          }
      }
    learner_created: true
  - name: src/antifraud/repository/FraudUserRepository.java
    visible: true
    text: |
      package antifraud.repository;
      
      import antifraud.domain.model.FraudUser;
      import org.springframework.data.jpa.repository.JpaRepository;
      import org.springframework.stereotype.Repository;
      
      import java.util.List;
      import java.util.Optional;
      
      @Repository
      public interface FraudUserRepository extends JpaRepository<FraudUser, Integer> {
          Optional<FraudUser> findByUsername(String username);
      
          boolean existsByUsername(String username);
      
          List<FraudUser> findAllByOrderByIdAsc();
      }
    learner_created: true
  - name: src/antifraud/exception/ConflictException.java
    visible: true
    text: |
      package antifraud.exception;
      
      public class ConflictException extends RuntimeException {
          public ConflictException(String message) {
              super(message);
          }
      }
    learner_created: true
  - name: src/antifraud/controller/IpAdressController.java
    visible: true
    text: |
      package antifraud.controller;
      
      
      import antifraud.domain.dto.IpAdressDTO;
      import antifraud.exception.NotFoundException;
      import antifraud.service.IpAdressService;
      import lombok.Getter;
      import org.apache.coyote.Response;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.http.MediaType;
      import org.springframework.http.ResponseEntity;
      import org.springframework.web.bind.annotation.*;
      
      import java.util.List;
      import java.util.Map;
      
      @RestController
      @RequestMapping("/api/antifraud/suspicious-ip")
      public class IpAdressController {
          @Autowired
          private IpAdressService ipAdressService;
      
          @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
          public ResponseEntity<IpAdressDTO> registerIpAdress(@RequestBody IpAdressDTO ipAdressDTO){
              if (ipAdressDTO.getIp() == null || ipAdressDTO.getIp().isEmpty()){
                  return ResponseEntity.badRequest().build();
              }
              try {
                  IpAdressDTO ipAdressDTO1 = ipAdressService.registerIpAdress(ipAdressDTO.getIp());
                  return ResponseEntity.ok(ipAdressDTO1);
              } catch (IllegalArgumentException e){
                  return ResponseEntity.status(409).build();
              } catch (RuntimeException e){
                  return ResponseEntity.badRequest().build();
              }
          }
      
          @DeleteMapping(value = "/{ip}")
          public ResponseEntity<Map<String, String>> deleteIpAdress(@PathVariable String ip){
              try {
                  return ResponseEntity.ok(Map.of("status", ipAdressService.deleteIpAdress(ip)));
              } catch (NotFoundException e){
                  return ResponseEntity.notFound().build();
              } catch (RuntimeException e){
                  return ResponseEntity.badRequest().build();
              }
          }
      
          @GetMapping
          public ResponseEntity<List<IpAdressDTO>> getAllIps(){
              return ResponseEntity.ok().body(ipAdressService.getIpAdresses());
          }
      }
    learner_created: true
  - name: src/antifraud/service/StolenCardService.java
    visible: true
    text: |
      package antifraud.service;
      
      import antifraud.domain.dto.StolenCardDTO;
      import antifraud.domain.model.StolenCard;
      import antifraud.exception.NotFoundException;
      import antifraud.repository.StolenCardRepository;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.stereotype.Service;
      
      import java.util.List;
      
      @Service
      public class StolenCardService {
      
          @Autowired
          private StolenCardRepository stolenCardRepository;
      
      
          public static boolean isValidLuhn(String number) {
              int n = number.length();
              int total = 0;
              boolean even = true;
              for (int i = n - 2; i >= 0; i--) {
                  int digit = number.charAt(i) - '0';
                  if (digit < 0 || digit > 9) {
                      return false;
                  }
                  if (even) {
                      digit <<= 1;
                  }
                  even = !even;
                  total += digit > 9 ? digit - 9 : digit;
              }
              int checksum = number.charAt(n - 1) - '0';
              return (total + checksum) % 10 == 0;
          }
      
      
          public StolenCardDTO addCard(String card){
              if (!isValidLuhn(card)){
                  throw new IllegalArgumentException("Wrong format!");
              }
              if (stolenCardRepository.existsByNumber(card)){
                  throw new NotFoundException("Already exists!");
              }
              StolenCard stolenCard = stolenCardRepository.save(new StolenCard(card));
              return new StolenCardDTO(stolenCard.getId(), stolenCard.getNumber());
          }
      
          public String deleteCard(String card){
              if (!isValidLuhn(card)){
                  throw new IllegalArgumentException("Wrong format!");
              }
              if (!stolenCardRepository.existsByNumber(card)){
                  throw new NotFoundException("Card doesnt exist!");
              }
      
              stolenCardRepository.delete(stolenCardRepository.findByNumber(card));
              return "Card "+card+" successfully removed!";
          }
      
          public List<StolenCardDTO> listCards(){
              return (stolenCardRepository.findAllByOrderByIdAsc()).stream().map(card -> new StolenCardDTO(card.getId(), card.getNumber())).toList();
          }
      }
    learner_created: true
  - name: src/antifraud/domain/dto/TransactionDTO.java
    visible: true
    text: |
      package antifraud.domain.dto;
      
      import jakarta.validation.constraints.*;
      import lombok.AllArgsConstructor;
      import lombok.Getter;
      import lombok.NoArgsConstructor;
      import lombok.Setter;
      
      
      public class TransactionDTO {
          @NotNull(message = "Amount must not be null")
          @Positive(message = "Amount must be positive")
          private Long amount;
      
          @NotEmpty(message = "IP address must not be empty")
          private String ip;
      
          @NotEmpty(message = "Card number must not be empty")
          private String number;
      
          public TransactionDTO(Long amount, String ip, String number) {
              this.amount = amount;
              this.ip = ip;
              this.number = number;
          }
      
          public TransactionDTO(){}
      
          public Long getAmount() {
              return amount;
          }
      
          public void setAmount(Long amount) {
              this.amount = amount;
          }
      
          public String getIp() {
              return ip;
          }
      
          public void setIp(String ip) {
              this.ip = ip;
          }
      
          public String getNumber() {
              return number;
          }
      
          public void setNumber(String number) {
              this.number = number;
          }
      }
    learner_created: true
  - name: src/antifraud/domain/dto/IpAdressDTO.java
    visible: true
    text: |
      package antifraud.domain.dto;
      
      
      import lombok.AllArgsConstructor;
      import lombok.Getter;
      import lombok.NoArgsConstructor;
      import lombok.Setter;
      
      
      public class IpAdressDTO {
          private Long id;
          private String ip;
      
          public IpAdressDTO(Long id, String ip) {
              this.id = id;
              this.ip = ip;
          }
      
          public IpAdressDTO(){}
      
          public Long getId() {
              return id;
          }
      
          public void setId(Long id) {
              this.id = id;
          }
      
          public String getIp() {
              return ip;
          }
      
          public void setIp(String ip) {
              this.ip = ip;
          }
      }
    learner_created: true
  - name: src/antifraud/domain/model/Transaction.java
    visible: true
    text: |
      package antifraud.domain.model;
      
      import jakarta.persistence.Entity;
      import jakarta.persistence.GeneratedValue;
      import jakarta.persistence.GenerationType;
      import jakarta.persistence.Id;
      import lombok.AllArgsConstructor;
      import lombok.Getter;
      import lombok.NoArgsConstructor;
      import lombok.Setter;
      
      @Entity
      public class Transaction {
          @Id
          @GeneratedValue(strategy = GenerationType.IDENTITY)
          private Long id;
          private Long amount;
          private String result;
          private String ip;
          private String number;
      
          public Transaction(Long id, Long amount, String result, String ip, String number) {
              this.id = id;
              this.amount = amount;
              this.result = result;
              this.ip = ip;
              this.number = number;
          }
      
          public Transaction() {
      
          }
      
          public Long getId() {
              return id;
          }
      
          public void setId(Long id) {
              this.id = id;
          }
      
          public Long getAmount() {
              return amount;
          }
      
          public void setAmount(Long amount) {
              this.amount = amount;
          }
      
          public String getResult() {
              return result;
          }
      
          public void setResult(String result) {
              this.result = result;
          }
      
          public String getIp() {
              return ip;
          }
      
          public void setIp(String ip) {
              this.ip = ip;
          }
      
          public String getNumber() {
              return number;
          }
      
          public void setNumber(String number) {
              this.number = number;
          }
      
      
      }
    learner_created: true
  - name: src/antifraud/repository/IpAdressRepository.java
    visible: true
    text: |
      package antifraud.repository;
      
      import antifraud.domain.dto.IpAdressDTO;
      import antifraud.domain.model.IpAdress;
      import org.springframework.data.jpa.repository.JpaRepository;
      import org.springframework.stereotype.Repository;
      
      import java.util.List;
      
      @Repository
      public interface IpAdressRepository extends JpaRepository<IpAdress, Long> {
          boolean existsByIp(String ip);
      
          IpAdress findByIp(String ip);
      
          List<IpAdress> findAllByOrderByIdAsc();
      }
    learner_created: true
  - name: src/antifraud/controller/TransactionController.java
    visible: true
    text: |
      package antifraud.controller;
      
      
      import antifraud.domain.dto.ResultDTO;
      import antifraud.domain.dto.TransactionDTO;
      import antifraud.domain.enums.TransactionStatus;
      import antifraud.service.TransactionService;
      import jakarta.validation.Valid;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.http.HttpStatus;
      
      import org.springframework.http.MediaType;
      import org.springframework.http.ResponseEntity;
      import org.springframework.validation.FieldError;
      import org.springframework.web.bind.MethodArgumentNotValidException;
      import org.springframework.web.bind.annotation.*;
      
      import java.util.HashMap;
      import java.util.Map;
      
      @RestController
      @RequestMapping("/api/antifraud")
      public class TransactionController {
      
          private final TransactionService transactionService;
      
          @Autowired
          public TransactionController(TransactionService transactionService) {
              this.transactionService = transactionService;
          }
      
          @PostMapping(value = "/transaction", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)
          public ResponseEntity<ResultDTO> createTransaction(@Valid @RequestBody TransactionDTO transaction) {
              ResultDTO result = transactionService.createTransaction(transaction);
              return ResponseEntity.ok(result);
          }
      
          @ResponseStatus(HttpStatus.BAD_REQUEST)
          @ExceptionHandler(MethodArgumentNotValidException.class)
          public Map<String, String> handleValidationExceptions(MethodArgumentNotValidException ex) {
              Map<String, String> errors = new HashMap<>();
              ex.getBindingResult().getAllErrors().forEach(error -> {
                  String fieldName = ((FieldError) error).getField();
                  String errorMessage = error.getDefaultMessage();
                  errors.put(fieldName, errorMessage);
              });
              return errors;
          }
      }
    learner_created: true
  - name: src/antifraud/domain/model/FraudUser.java
    visible: true
    text: |
      package antifraud.domain.model;
      
      import antifraud.domain.enums.UserRoles;
      import jakarta.persistence.*;
      import org.apache.catalina.User;
      
      @Entity
      @Table(name = "fraud_user")
      public class FraudUser {
          @Id
          @GeneratedValue(strategy = GenerationType.IDENTITY)
          private Integer id;
          private String username;
          private String name;
          private String password;
          private UserRoles role;
      
          private boolean locked = false;
      
          public Integer getId() {
              return id;
          }
      
          public void setId(Integer id) {
              this.id = id;
          }
      
          public String getUsername() {
              return username;
          }
      
          public void setUsername(String username) {
              this.username = username;
          }
      
          public String getName() {
              return name;
          }
      
          public void setName(String name) {
              this.name = name;
          }
      
          public String getPassword() {
              return password;
          }
      
          public void setPassword(String password) {
              this.password = password;
          }
      
          public UserRoles getRole() {
              return role;
          }
      
          public void setRole(UserRoles role) {
              this.role = role;
          }
      
          public boolean isLocked() {
              return locked;
          }
      
          public void setLocked(boolean locked) {
              this.locked = locked;
          }
      }
    learner_created: true
  - name: src/antifraud/exception/NotFoundException.java
    visible: true
    text: |
      package antifraud.exception;
      
      public class NotFoundException extends RuntimeException {
          public NotFoundException(String message) {
              super(message);
          }
      }
    learner_created: true
  - name: src/antifraud/domain/model/FraudUserAdapter.java
    visible: true
    text: |
      package antifraud.domain.model;
      
      import antifraud.domain.enums.UserRoles;
      import org.springframework.security.core.GrantedAuthority;
      import org.springframework.security.core.authority.SimpleGrantedAuthority;
      import org.springframework.security.core.userdetails.UserDetails;
      
      import java.util.Collection;
      import java.util.Collections;
      
      public class FraudUserAdapter implements UserDetails {
      
          private final FraudUser user;
      
          public FraudUserAdapter(FraudUser user) {
              this.user = user;
          }
      
          @Override
          public Collection<? extends GrantedAuthority> getAuthorities() {
              // If user.getAuthority() returns null or empty string, provide a default authority
              UserRoles authority = (user.getRole() != null && !user.getRole().isEmpty())
                      ? user.getRole()
                      : UserRoles.MERCHANT;
              return Collections.singletonList(new SimpleGrantedAuthority(authority.toString()));
          }
      
          @Override
          public String getPassword() {
              return user.getPassword();
          }
      
          @Override
          public String getUsername() {
              return user.getUsername();
          }
      
          @Override
          public boolean isAccountNonExpired() {
              return true;
          }
      
          @Override
          public boolean isAccountNonLocked() {
              return !user.isLocked();
          }
      
          @Override
          public boolean isCredentialsNonExpired() {
              return true;
          }
      
          @Override
          public boolean isEnabled() {
              return true;
          }
      }
    learner_created: true
  - name: src/antifraud/domain/dto/ResultDTO.java
    visible: true
    text: |
      package antifraud.domain.dto;
      
      import antifraud.domain.enums.TransactionStatus;
      import lombok.AllArgsConstructor;
      import lombok.Getter;
      import lombok.NoArgsConstructor;
      import lombok.Setter;
      
      
      public class ResultDTO {
          private TransactionStatus result;
          private String info;
      
          public ResultDTO(TransactionStatus result, String info) {
              this.result = result;
              this.info = info;
          }
      
          public TransactionStatus getResult() {
              return result;
          }
      
          public void setResult(TransactionStatus result) {
              this.result = result;
          }
      
          public String getInfo() {
              return info;
          }
      
          public void setInfo(String info) {
              this.info = info;
          }
      
      
      }
    learner_created: true
  - name: src/antifraud/service/IpAdressService.java
    visible: true
    text: |
      package antifraud.service;
      
      import antifraud.domain.dto.IpAdressDTO;
      import antifraud.domain.model.IpAdress;
      import antifraud.exception.NotFoundException;
      import antifraud.repository.IpAdressRepository;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.stereotype.Service;
      
      import java.util.List;
      
      @Service
      public class IpAdressService
      {
          @Autowired
          private IpAdressRepository ipAdressRepository;
      
      
          public static boolean isValidIPv4(String ip) {
              String[] parts = ip.split("\\.");
              if (parts.length != 4) {
                  return false;
              }
              for (String part : parts) {
                  try {
                      int num = Integer.parseInt(part);
                      if (num < 0 || num > 255) {
                          return false;
                      }
                  } catch (NumberFormatException e) {
                      return false;
                  }
              }
              return true;
          }
      
          public IpAdressDTO registerIpAdress(String ip){
              if (ipAdressRepository.existsByIp(ip)){
                  throw new IllegalArgumentException("IP already exists");
              }
              if (!isValidIPv4(ip)){
                  throw new RuntimeException("Invalid IP");
              }
              IpAdress ipAdress = new IpAdress();
              ipAdress.setIp(ip);
              ipAdressRepository.save(ipAdress);
              return new IpAdressDTO(ipAdress.getId(), ip);
          }
      
          public String deleteIpAdress(String ip){
              if (!isValidIPv4(ip)){
                  throw new RuntimeException("Invalid IP");
              }
              if (!ipAdressRepository.existsByIp(ip)){
                  throw new NotFoundException("IP doesn't exist");
              }
              ipAdressRepository.delete((ipAdressRepository.findByIp(ip)));
              return "IP "+ip+" successfully removed!";
          }
      
          public List<IpAdressDTO> getIpAdresses(){
              return (ipAdressRepository.findAllByOrderByIdAsc()).stream().map(ip -> new IpAdressDTO(ip.getId(), ip.getIp())).toList();
          }
      }
    learner_created: true
  - name: src/antifraud/repository/TransactionRepository.java
    visible: true
    text: |
      package antifraud.repository;
      
      import antifraud.domain.model.Transaction;
      import org.springframework.data.jpa.repository.JpaRepository;
      import org.springframework.stereotype.Repository;
      
      @Repository
      public interface TransactionRepository extends JpaRepository<Transaction, Long> {
      }
    learner_created: true
  - name: src/antifraud/domain/enums/UserRoles.java
    visible: true
    text: |
      package antifraud.domain.enums;
      
      public enum UserRoles {
          MERCHANT,
          ADMINISTRATOR,
          SUPPORT;
      
          public boolean isEmpty() {
              return this == null || this.toString().isEmpty();
          }
      }
    learner_created: true
  - name: src/antifraud/domain/dto/UserAccessDTO.java
    visible: true
    text: |
      package antifraud.domain.dto;
      
      public class UserAccessDTO {
          private String username;
          private String operation;
      
      
      
          public String getUsername() {
              return username;
          }
      
          public void setUsername(String username) {
              this.username = username;
          }
      
          public String getOperation() {
              return operation;
          }
      
          public void setOperation(String operation) {
              this.operation = operation;
          }
      }
    learner_created: true
  - name: src/antifraud/service/TransactionService.java
    visible: true
    text: |
      package antifraud.service;
      
      import antifraud.domain.dto.ResultDTO;
      import antifraud.domain.dto.TransactionDTO;
      import antifraud.domain.enums.TransactionStatus;
      import antifraud.repository.IpAdressRepository;
      import antifraud.repository.StolenCardRepository;
      import antifraud.repository.TransactionRepository;
      import org.springframework.beans.factory.annotation.Autowired;
      import org.springframework.stereotype.Service;
      
      import java.util.ArrayList;
      import java.util.List;
      
      @Service
      public class TransactionService {
      
          private final IpAdressRepository ipAddressRepository;
          private final StolenCardRepository stolenCardRepository;
      
          @Autowired
          public TransactionService(IpAdressRepository ipAddressRepository, StolenCardRepository stolenCardRepository) {
              this.ipAddressRepository = ipAddressRepository;
              this.stolenCardRepository = stolenCardRepository;
          }
      
          public ResultDTO createTransaction(TransactionDTO transactionDTO) {
              List<String> infoList = new ArrayList<>();
      
              if (transactionDTO.getAmount() == null || transactionDTO.getAmount() <= 0) {
                  infoList.add("amount");
              } else if (transactionDTO.getAmount() > 1500) {
                  infoList.add("amount");
              }
      
              if (transactionDTO.getIp() == null || transactionDTO.getIp().isEmpty() || ipAddressRepository.existsByIp(transactionDTO.getIp())) {
                  infoList.add("ip");
              }
      
              if (transactionDTO.getNumber() == null || transactionDTO.getNumber().isEmpty() || stolenCardRepository.existsByNumber(transactionDTO.getNumber())) {
                  infoList.add("card-number");
              }
      
              if (!infoList.isEmpty()) {
                  infoList.sort(String::compareTo);
                  String info = String.join(", ", infoList);
                  return new ResultDTO(TransactionStatus.PROHIBITED, info);
              }
      
              if (transactionDTO.getAmount() <= 200) {
                  return new ResultDTO(TransactionStatus.ALLOWED, "none");
              } else {
                  return new ResultDTO(TransactionStatus.MANUAL_PROCESSING, "amount");
              }
          }
      }
    learner_created: true
  - name: src/antifraud/domain/enums/TransactionStatus.java
    visible: true
    text: |
      package antifraud.domain.enums;
      
      public enum TransactionStatus {
          ALLOWED,
          MANUAL_PROCESSING,
          PROHIBITED
      }
    learner_created: true
  - name: src/antifraud/domain/model/Region.java
    visible: true
    learner_created: true
  - name: src/antifraud/repository/RegionRepository.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/18071#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 26 Aug 2024 23:29:23 UTC"
record: -1
